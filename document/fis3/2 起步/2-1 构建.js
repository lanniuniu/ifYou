/**
 * Created by 懒牛牛 on 2017/11/6.
 */

/*
构建
由 fis3-command-release 插件提供构建能力
FIS3 的构建不会修改源码，而是会通过用户设置，将构建结果输出到指定的目录。
 */

/*
命令
根目录是 fis-conf.js所在目录
fis3 release -d <path> 构建发布到指定目录
 */

/*
资源定位
构建过程中对资源 URI 进行了替换，替换成了绝对 URL。相对路径换成了绝对路径。
这是一个 FIS 的很重要的特性，资源定位。
资源定位能力，可以有效地分离开发路径与部署路径之间的关系，工程师不再关心资源部署到线上之后去了哪里，变成了什么名字，
这些都可以通过配置来指定。而工程师只需要使用相对路径来定位自己的开发资源即可。
这样的好处是 资源可以发布到任何静态资源服务器的任何路径上，而不用担心线上运行时找不到它们，而且代码 具有很强的可移植性，
甚至可以从一个产品线移植到另一个产品线而不用担心线上部署不一致的问题。
通过配置文件配置这些
 */

/*
配置文件
默认配置文件为 fis-conf.js，FIS3 编译的整个流程都是通过配置来控制的。FIS3 定义了一种类似 CSS 的配置方式。
固化了构建流程，让工程构建变得简单。

fis.match(selector, props) 设置规则的配置接口 特性：规则覆盖

fis.media() 接口提供多种状态功能，比如有些配置是仅供开发环境下使用，有些则是仅供生产环境使用的。
example:

fis.match('*', {
  useHash: false
});

fis.media('prod').match('*.js', {
  optimizer: fis.plugin('uglify-js')
});
fis3 release <media>
<media> 配置的 media 值
fis3 release prod

我们执行 fis3 inspect 来查看文件命中属性的情况。
fis3 inspect 是一个非常重要的命令，可以查看文件分配到的属性，这些属性决定了文件将如何被编译处理。

 */

/*
文件指纹
文件指纹，唯一标识一个文件。在开启强缓存的情况下，如果文件的 URL 不发生变化，无法刷新浏览器缓存。
一般都需要通过一些手段来强刷缓存，一种方式是添加时间戳，每次上线更新文件，给这个资源文件的 URL 添加上时间戳。
 FIS3 选择的是添加 MD5 戳，直接修改文件的 URL，而不是在其后添加 query。
 对 js、css、png 图片引用 URL 添加 md5 戳，配置如下；
//清除其他配置，只剩下如下配置
fis.match('*.{js,css,png}', {
  useHash: true
});
 */

/*
片段编译

有些插件会对文件中的一部分先进行片段编译fis.compile.partial, 这时可以对相应的片段编译配置对应的规则。
 */

/*
压缩资源

为了减少资源网络传输的大小，通过压缩器对 js、css、图片进行压缩是一直以来前端工程优化的选择。
在 FIS3 中这个过程非常简单，通过给文件配置压缩器即可。
 */

/*
CssSprite图片合并
压缩了静态资源，我们还可以对图片进行合并，来减少请求数量。
FIS3 提供了比较简易、使用方便的图片合并工具。通过配置即可调用此工具并对资源进行合并。
FIS3 构建会对 CSS 中，路径带 ?__sprite 的图片进行合并。为了节省编译的时间，分配到 useSprite: true 的 CSS 文件才会被处理。
 */

/*
功能组合

把上面的配置一个一个地写出来
 */


