/**
 * Created by 懒牛牛 on 2017/2/14.
 */
// 在 ECMAScript 中，变量可以存在两种类型的值，即原始值和引用值。
// 原始值
// 存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。
// 引用值
// 存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。
// 如果一个值是引用类型(例如对象)的，那么它的存储空间将从堆中分配。
// 由于引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。
// 相反，放在变量的栈空间中的值是该对象存储在堆中的地址。
// 地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。
// 原始类型 ECMAScript 有 5 种原始类型（primitive type），即 Undefined、Null、Boolean、Number 和 String。
// ECMAScript 提供了 typeof 运算符来判断一个值是否在某种类型的范围内。
// 可以用这种运算符判断一个值是否表示一种原始类型：如果它是原始类型，还可以判断它表示哪种原始类型。

// typeof 运算符有一个参数，即要检查的变量或值
// undefined - 如果变量是 Undefined 类型的
// boolean - 如果变量是 Boolean 类型的
// number - 如果变量是 Number 类型的
// string - 如果变量是 String 类型的
// object - 如果变量是一种引用类型或 Null 类型的

// typeof一个未定义的变量为undefined，但对他使用其他运算符就会报错
console.log(null == undefined);//true
console.log(null === undefined);//false
// undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象

// 八进制数和十六进制数
// 整数也可以被表示为八进制（以 8 为底）或十六进制（以 16 为底）的字面量。
// 八进制字面量的首数字必须是 0，其后的数字可以是任何八进制数字（0-7）
// 要创建十六进制的字面量，首位数字必须为 0，后面接字母 x，
// 然后是任意的十六进制数字（0 到 9 和 A 到 F）。这些字母可以是大写的，也可以是小写的
// 浮点数
// 要定义浮点值，必须包括小数点和小数点后的一位数字（例如，用 1.0 而不是 1）。这被看作浮点数字面量。
// 对于浮点字面量的有趣之处在于，用它进行计算前，真正存储的是字符串。
// 对于非常大或非常小的数，可以用科学计数法表示浮点数，
// 可以把一个数表示为数字（包括十进制数字）加 e（或 E），后面加乘以 10 的倍数。

// Number.MAX_VALUE 和 Number.MIN_VALUE
// Number.POSITIVE_INFINITY(Infinity) 和 Number.NEGATIVE_INFINITY(-Infinity)
//
// 可以对任何数调用 isFinite() 方法，以确保该数不是无穷大。
// 最后一个特殊值是 NaN，表示非数（Not a Number）。NaN 是个奇怪的特殊值。
// 一般说来，这种情况发生在类型（String、Boolean 等）转换失败时。
// 例如，要把单词 blue 转换成数值就会失败，因为没有与之等价的数值。
// 与无穷大一样，NaN 也不能用于算术计算。NaN 的另一个奇特之处在于，它与自身不相等，
// isNaN()







