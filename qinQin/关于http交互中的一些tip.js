/**
 * Created by 懒牛牛 on 2017/2/25.
 */

/*
其实普通的web应用也就是对http的应用
 而我们熟悉的IIS，Tomcat，Apache，Web logic，都是能够作为某些web服务器容器的大型服务器平台，
 它们都会包括很多更为强大的功能。一般来说，我们这里所说的服务器指的是自己用特定语言写的web应用服务器程序。
 nodejs不需要web容器，本身就有对http的直接应用模块，所以用nodejs创建一个web服务器是很方便的。
 */

/*
过程
1.域名解析，发送解析出来的ip地址，然后进行三次握手，连接成功。
2.客户端发送http请求，请求信息包含一个头部和一个请求体（可能会被封装）。
在请求对象中我们可以得到path（路径），queryString（查询字符串），body（post请求中提交的数据）等。
3.http响应，也就是要有一个响应头和一个响应体。
一般接触到的设置响应头就是设置content-type来决定MIME类型，设置Cache-Control，
last-modify等缓存内容。返回给客户端的内容是一个html字符串，然后content-type设为text/html。
 当然也可能客户端请求的是一个image文件，那么就是读取image文件后，
 content-type可能设为image/png,image/jpg等,然后把内容返回给客户端。
 当然这个过程太单一，而且处理过程也可能很复杂，又有数据的操作，又有页面的构建，
 又有路径的查找匹配，又有文件的读取等等，于是就出现了MVC框架以及后来演变出的各种MV框架。
 mvc框架做到了解耦和模块化，实现重要的两点：
     1.路由匹配，http请求的path中就不需要指定到具体的视图位置，而是按照我们制定的规则进行匹配，
     这样就有了很大的灵活性，可编程性。
     2.模板技术，一般来说我们最后返回给客户端的是一个html字符串，而有时候这个字符串往往不是静态单一的，
     有的时候需要和数据进行结合，需要拼接。这就带来了很大的麻烦，模板技术为解决这个问题带来很大的便利性，
     同时又能够把视图和数据进行解耦。
4.客户端渲染
 客户端接收到服务器传来的响应对象，从中得到html字符串和MIME，
 根据MIME知道了要用页面渲染引擎来处理内容即html字符串，于是进入页面渲染阶段，
 从浏览器的角度讲，它包含几大组件，网络功能（比如http的实现），渲染引擎
 还有其它的一些比如自己UI界面，javascript解释器，客户端数据存储等等。
 在这里我们主要关注渲染引擎和javascript解释器，对于web开发者来说，这才是浏览器的核心。

 我们能够在浏览器中看到一个页面，那么这个页面是怎么出现的呢？实际上就是调用底层绘图API给画出来的。
 不同的渲染引擎，它的实现也不同，主流的引擎包括IE的Trident，chrome和safary的webkit，
 firefox的Gecko，chrome又出了一个Blink，放弃webkit。

 整体上页面渲染的过程大致是这样的：
 渲染引擎得到html字符串作为输入，然后对html进行转换，转化成能够被DOM处理的形式，接着转换成一个dom树，
 在解析html的过程，解析到<link>,<script>,等一些请求标签时，会发送请求把对应的内容获取到。
 这时又会同步进行css的解析，构建出css样式规则应用到dom树上，然后进行一定的布局处理，
 比如标记节点块在浏览器中的坐标等形成最终的渲染树，最后根据这棵渲染树在浏览器窗口中进行绘制。
 当然在页面渲染过程中还会同步进行javascript的解析，而且这两者是在同一个线程中的，
 所以一旦javascript死循环，页面的渲染也就进行不下去了。
 */




















