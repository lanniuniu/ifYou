/*
一、前端工程化
前端工程化不单单包括前端的模块化、组件化、自动化，还包括前端性能优化，前端目录规划，前端规范化，自动化测试，发布等等一系列知识。

静态资源管理系统 = 资源表 + 资源加载框架

前端性能优化
1、请求数量：
合并脚本和样式表
CSS Sprites: 使用background-position来调整背景图像的位置
拆分初始化负载：初始化时加载必要的javaScript,其余的JavaScript稍后再加载；避免给用户带来响应停顿的印象。
划分主域: 利用浏览器对同一url的并行请求加载数限制，划分资源的主从域后，可大大提升总体的加载完成时间

2、请求带宽
开启GZIP：服务器开启GZIP压缩（非图片、wps、音乐等），压缩等级越大约占CPU资源
精简js：压缩js
移除重复脚本
图像优化

3、缓存利用
使用CDN
使用外部JS和CSS
添加Expires、配置ETag: 服务器添加Expires头、配置ETag能有效的利用浏览器的缓存能力来改善页面的性能，能在后续的页面中有效避免很多不必要的Http请求
减少DNS查找：将所有的内容资源都放在同一个域(Domain)下面，这样访问整个网站就只需要进行一次DNS查找。这和划分主域相驳，所以采用折衷方案——2-4个域
使用 静态资源管理系统 = 资源表 + 资源加载框架 。实现永久开启缓存，缓存更新
4、页面结构
将样式表放在顶部
将脚本放在底部
尽早刷新文档的输出
二、前端设计模式

三、前端安全性问题

四、跨域问题处理

五、前端数据加密

六、http相关问题
http和https的区别
七、webpack相关
webpack plugin和loader


八、状态管理器相关

九、vue相关
vuex原理
vue router原理
vue 双向绑定原理
十、nodejs相关
module.export export. 区别
十一、es6相关

十二、算法

十三、模块化

十四、其他
1、自动化测试
2、mock数据
3、pwa
4、nginx
5、小程序
6、敏捷开发
7.v8的gc
 */
