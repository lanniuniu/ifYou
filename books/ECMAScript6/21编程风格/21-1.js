/**
 * Created by 懒牛牛 on 2017/1/19.
 */

/**
 * 1.块级作用域
 * （1）let和const 取代 var
 * （2）全局常量和线程安全
 * 2.字符串
 * （1）静态字符串一律使用单引号，不使用双引号。动态字符串使用反引号。
 * 3.解构赋值
 * （1）使用数组成员对变量赋值时，优先使用解构赋值。
 * （2）函数的参数如果是对象的成员，优先使用解构赋值。
 * （3）如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。
 * 4.对象
 * （1）单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。
 * （2）对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。
 * （3）如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。
         * const obj = {
          id: 5,
          name: 'San Francisco',
          [getKey('enabled')]: true,
        };
 * (4)对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写
 * 5.数组
 * （1）使用扩展运算符（...）拷贝数组。
 * （2）使用Array.from方法，将类似数组的对象转为数组。
 * 6.函数
 * （1）立即执行函数可以写成箭头函数的形式。
 * （2）那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。
 * （3）箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。
 * （4）所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。
 * （5）不要在函数体内使用arguments变量，使用rest运算符（...）代替。
     因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。
 * （6）使用默认值语法设置函数参数的默认值。
 * 7.Map结构
 * （1）注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。
 *      如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。
 * 8.Class
 * （1）总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。
 * （2）使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。
 *  9.模块
 * （1）Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require
 * （2）使用export取代module.exports。
 * （3）如果模块只有一个输出值，就使用export default，
 *      如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。
 * （4）不要在模块输入中使用通配符（*）。因为这样可以确保你的模块之中，有一个默认输出（export default）。
 * （5）如果模块默认输出一个函数，函数名的首字母应该小写。
 * （6）如果模块默认输出一个对象，对象名的首字母应该大写。
 */
















